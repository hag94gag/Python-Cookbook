=======================================================================================================================================================================================================================================
       													TRY, EXCEPT, and RAISING EXCEPTIONS
=======================================================================================================================================================================================================================================

1. PURPOSE:
   - Handle errors gracefully during program execution.
   - Prevent crashes by catching and managing exceptions.
   - Raise custom errors when needed.

===============================
2. SYNTAX OVERVIEW
===============================

try:
    # Code that might cause an error
    risky_code()
except SpecificErrorType:
    # Code to handle the error
    handle_error()
except AnotherErrorType as e:
    # Access the error message via 'e'
    print(f"Error occurred: {e}")
else:
    # Code to execute if no errors occur
    print("All good! No exceptions.")
finally:
    # Code that runs no matter what
    clean_up()

===============================
3. RAISE: GENERATING ERRORS
===============================

raise ExceptionType("Custom error message")

EXAMPLE:
if value < 0:
    raise ValueError("Value must be non-negative")

===============================
4. EXAMPLES: TRY-EXCEPT-USAGE
===============================

A. CATCHING SPECIFIC ERRORS:
   try:
       number = int(input("Enter a number: "))
   except ValueError:
       print("That's not a valid number!")

B. MULTIPLE EXCEPT BLOCKS:
   try:
       with open("file.txt", "r") as f:
           data = f.read()
   except FileNotFoundError:
       print("The file was not found.")
   except PermissionError:
       print("You don't have permission to read the file.")

C. USING ELSE AND FINALLY:
   try:
       result = 10 / 2
   except ZeroDivisionError:
       print("Cannot divide by zero!")
   else:
       print(f"Result: {result}")
   finally:
       print("Execution complete.")

D. RAISING EXCEPTIONS:
   def divide(a, b):
       if b == 0:
           raise ZeroDivisionError("Cannot divide by zero!")
       return a / b

   try:
       print(divide(10, 0))
   except ZeroDivisionError as e:
       print(f"Error: {e}")

===============================
5. BEST PRACTICES
===============================

- Use specific exceptions instead of a generic `except` to avoid masking bugs.
- Always provide meaningful error messages when raising exceptions.
- Use `finally` to release resources (e.g., close files or database connections).
- Use `else` for cleaner code when no exceptions occur.

===============================
6. VISUAL EXAMPLE (FLOW)

        [ TRY ]
          |
  [ Error Occurs? ]
      /     \
   Yes       No
   |          |
[ EXCEPT ]  [ ELSE ]
    \         /
   [ FINALLY ]
        |
   [ END OF FLOW ]

===============================

===============================
           TRACEBACK EXPLAINED
===============================
   - A traceback is the error report Python generates when your program encounters an exception.
   - It shows the sequence of function calls and code lines that led to the error.

===============================
2. STRUCTURE OF A TRACEBACK
===============================

- Each traceback has three main parts:
  1. The *Call Stack*: Shows the sequence of files, functions, and lines where the code was executed.
  2. The *Error Type*: Indicates the type of exception raised (e.g., ValueError, FileNotFoundError).
  3. The *Error Message*: Provides a description of what went wrong.

===============================
3. TRACEBACK EXAMPLE
===============================

Traceback (most recent call last):
  File "main.py", line 12, in <module>
    result = divide(10, 0)
  File "main.py", line 5, in divide
    return a / b
ZeroDivisionError: division by zero

===============================
4. BREAKDOWN OF THE EXAMPLE
===============================

A. HEADER: "Traceback (most recent call last)"
   - Python begins the traceback with this line to indicate an error occurred.

B. STACK TRACE (The Call Stack):
   - Shows the sequence of function calls and files where the error occurred:
      1. File "main.py", line 12, in <module>
         result = divide(10, 0)
      2. File "main.py", line 5, in divide
         return a / b
   - The most recent function call is shown last (from top to bottom).

C. ERROR TYPE AND MESSAGE:
   - ZeroDivisionError: division by zero
   - Explains the type of error (ZeroDivisionError) and the reason ("division by zero").

===============================
5. COMMON ERROR TYPES
===============================

- FileNotFoundError: File doesn't exist.
- ValueError: Invalid value passed to a function.
- KeyError: Key not found in a dictionary.
- TypeError: Operation not supported on a given type.
- ZeroDivisionError: Division by zero attempted.
- IndexError: Accessed an index outside the range of a list.

===============================
6. HOW TO READ A TRACEBACK
===============================

Step 1: Start from the bottom.
   - Look at the error type and message to identify the issue.

Step 2: Work upwards through the stack trace.
   - Check the sequence of function calls leading to the error.
   - Locate the file and line number causing the problem.

===============================
7. TRACEBACK VISUAL FLOW

        [ Traceback Header ]
                |
          [ Call Stack ]
      (Top to Bottom)
                |
       [ Error Type & Message ]
                |
          [ Fix the Issue ]

===============================
8. TIPS FOR DEBUGGING
===============================

- Use the file name and line number to locate the error in your code.
- Look at the error message for clues about the root cause.
- Test and debug incrementally to prevent complex tracebacks.

===============================
=======================================
      WRITING TRACEBACK TO A FILE
=======================================

1. PURPOSE:
   - Save traceback details to a text file for debugging later.

=======================================
2. THE CODE:
=======================================

import traceback

try:
    # Code that might raise an exception
    result = 10 / 0
except Exception as e:
    # Open a file in write mode
    with open("traceback_info.txt", "w") as file:
        # Write traceback details to the file
        file.write("An error occurred:\n")
        file.write(traceback.format_exc())
    print("Traceback information written to 'traceback_info.txt'.")

=======================================
3. HOW IT WORKS:
=======================================

1. TRY BLOCK:
   - Contains code that may cause an error.
   - In this example, dividing by zero raises an exception.

2. EXCEPT BLOCK:
   - Catches the exception and processes it.

3. WRITING TO THE FILE:
   - `traceback.format_exc()` generates a formatted traceback string.
   - The string is written to `traceback_info.txt`.

4. OUTPUT:
   - A text file named `traceback_info.txt` is created.
   - It contains the error details.

=======================================
4. OUTPUT FILE EXAMPLE:
=======================================

traceback_info.txt:
-------------------
An error occurred:
Traceback (most recent call last):
  File "example.py", line 5, in <module>
    result = 10 / 0
ZeroDivisionError: division by zero

=======================================
5. USE CASES:
=======================================

- Debugging errors in scripts running in the background.
- Collecting error logs for troubleshooting.
- Maintaining a record of exceptions for analysis.

=======================================
6. FLOWCHART:

    [ Code Execution ]
           |
       [ Exception ]
           |
    [ Generate Traceback ]
           |
    [ Write to File ]
           |
    [ File Created with Traceback Info ]

=======================================



