==================================================
FILE PATHS, HIERARCHY, AND STRUCTURE IN OPERATING SYSTEMS
==================================================

1. **WINDOWS**
   - Path Separator: Backslash `\`
   - Root Directory: `C:\`, `D:\`, etc. (Drive letters)
   - Case Sensitivity: Case-insensitive (e.g., `File.txt` = `file.txt`)
   - File Path Example: `C:\Users\Username\Documents\File.txt`
   - Structure:
     - Drives (e.g., `C:`)
     - Folders and subfolders organized hierarchically
     - Special folders: Desktop, Documents, Downloads
   - Absolute Path: Begins with the drive letter, e.g., `C:\Program Files\MyApp`
   - Relative Path: Based on the current working directory, e.g., `.\Subfolder\File.txt`

2. **LINUX**
   - Path Separator: Forward slash `/`
   - Root Directory: Single root `/`
   - Case Sensitivity: Case-sensitive (e.g., `File.txt` â‰  `file.txt`)
   - File Path Example: `/home/username/documents/file.txt`
   - Structure:
     - Unified file system starting from `/`
     - Key directories:
       - `/home`: User files
       - `/etc`: Configuration files
       - `/var`: Logs and temporary files
       - `/bin`, `/usr/bin`: Executable binaries
   - Absolute Path: Begins with `/`, e.g., `/usr/local/bin/script.sh`
   - Relative Path: Based on the current directory, e.g., `../Documents/File.txt`

3. **MAC (MacOS)**
   - Path Separator: Forward slash `/` (like Linux)
   - Root Directory: Single root `/`
   - Case Sensitivity: By default, case-insensitive; but case-sensitive file systems are optional
   - File Path Example: `/Users/username/Documents/File.txt`
   - Structure:
     - Similar to Linux
     - Key directories:
       - `/Users`: User files
       - `/Applications`: Installed apps
       - `/System`: Core OS files
       - `/Library`: System and application libraries
   - Absolute Path: Begins with `/`, e.g., `/Applications/MyApp.app`
   - Relative Path: Based on the current directory, e.g., `./File.txt`

==================================================
KEY DIFFERENCES
==================================================
- **Path Separators**: `\` (Windows) vs `/` (Linux/Mac).
- **Root Directory**: Drives (`C:\`) in Windows, single `/` in Linux/Mac.
- **Case Sensitivity**: Windows is case-insensitive; Linux/Mac are case-sensitive (default).
- **File Systems**:
  - Windows: NTFS, FAT32.
  - Linux: ext4, xfs, btrfs.
  - Mac: APFS, HFS+.

==================================================
TIPS FOR PORTABILITY
==================================================
- Use Python's `os` or `pathlib` modules for cross-platform path handling.
- Normalize paths using `os.path.normpath` or `pathlib.Path`.
- Avoid hardcoding path separators.

==================================================
1. **Definition**:
   - Starts from the current working directory or a reference path.
   - Depends on the current location of the program.

2. **Examples**:
   - `documents/file.txt` (relative to the current directory)
   - `../file.txt` (relative to the parent directory)

3. **Characteristics**:
   - Shorter and context-dependent.
   - Requires knowledge of the base directory to resolve.

4. **Python Example**:
   ```python
   from pathlib import Path
   rel_path = Path("documents/file.txt")
   abs_path = rel_path.resolve()  # Converts to absolute path
   print(abs_path)
   ```

==================================================
COMPARISON
==================================================
| Feature                | Absolute Path                    | Relative Path                |
|------------------------|----------------------------------|------------------------------|
| **Starts From**        | Root directory                   | Current directory or base    |
| **Context-Dependent**  | No                               | Yes                          |
| **Example (Linux)**    | `/home/user/file.txt`            | `documents/file.txt`         |
| **Example (Windows)**  | `C:\Users\John\file.txt`         | `docs\file.txt`              |

==================================================
CONVERTING BETWEEN PATHS
==================================================
1. **Relative to Absolute**:
   ```python
   rel_path = Path("documents/file.txt")
   abs_path = rel_path.resolve()
   print(abs_path)  # Outputs absolute path
   ```

2. **Absolute to Relative**:
   ```python
   base_path = Path("/home/user")
   abs_path = Path("/home/user/documents/file.txt")
   rel_path = abs_path.relative_to(base_path)
   print(rel_path)  # Output: documents/file.txt
   ```

==================================================
TIPS
==================================================
- Use absolute paths for scripts that must run in varied environments.
- Use relative paths for portability and to simplify project structures.

==================================================
Path object attributes
==================================================

	      Suffix
                +    +-- Stem
                |    |
               spam.txt (C:\Users\A)
           

Drive -----+              Base Name
           |		      ^
	   |	   	      |
           +-- C:\Users\AL\spam.txt (/home/al)
	       ---
		^	 ^
	        |  	 |
	       ---     Parent
	      Anchor
	     |	 	    |
	      --------------
		     |
		  Dir Name

### DRIVE
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.drive   | Returns the drive letter (Windows only) or empty. | `path = Path("C:/folder/file.txt"); drive = path.drive` |
|              | In Linux/Mac, it returns an empty string.          | `path = Path("/home/user/folder"); drive = path.drive` |

---

### SUFFIX
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.suffix  | Returns the file extension (including the dot).   | `path = Path("file.txt"); suffix = path.suffix`    |
|              | If the file has no extension, returns an empty string. | `path = Path("folder/filename"); suffix = path.suffix` |

---

### STEM
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.stem    | Returns the file name without the extension.      | `path = Path("file.txt"); stem = path.stem`         |
|              | The stem excludes the period (dot) as well.        | `path = Path("folder/filename.ext"); stem = path.stem` |

---

### ANCHOR
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.anchor  | Returns the root or anchor portion of the path.   | `path = Path("/home/user/folder/file.txt"); anchor = path.anchor` |
|              | This includes the drive letter or root directory. | `path = Path("C:/folder/file.txt"); anchor = path.anchor` |

---

### PARENT
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.parent  | Returns the parent directory of the path.         | `path = Path("/home/user/folder/file.txt"); parent = path.parent` |
|              | If the path is already the root, it returns the root. | `path = Path("/home"); parent = path.parent`  |

---

### NAME
| Function     | Description                                       | Example Usage                                  |
|--------------|---------------------------------------------------|------------------------------------------------|
| Path.name    | Returns the final component (file or folder) of the path. | `path = Path("/home/user/folder/file.txt"); name = path.name` |
|              | This includes the file name or folder name only.   | `path = Path("folder/file.txt"); name = path.name` |



==================================================
PATHLIB: MODERN PATH HANDLING IN PYTHON
==================================================
- Cross-platform path handling for files and directories.


==================================================
BASIC USAGE
==================================================
1. **Importing Pathlib**:
	- from pathlib import Path

2. **Creating a Path**:
	- path = Path("home/user/documents")

3. **Creating a Path**:
	- full_path = path / "file.txt"
	  print(full_path)

==================================================
USING THE `/` OPERATOR TO JOIN PATHS
==================================================

The `/` operator can be used for joining paths in Python when using the `pathlib` module. This approach is **cross-platform**, meaning it works seamlessly on Windows, Linux, and Mac.

==================================================
WHY USE THE `/` OPERATOR?
==================================================
1. Simplifies path manipulation.
2. Automatically handles the correct path separator (`\` or `/`).
3. Avoids manual concatenation (e.g., `os.path.join()`).

==================================================
EXAMPLE USAGE
==================================================

1. **Importing `pathlib`:**
   ```python
   from pathlib import Path




==================================================
PATHLIB MODULE FUNCTIONS (ORGANIZED BY CATEGORY)
==================================================

### PATH CREATION

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path(string)                      | Creates a new Path object from a string path.    | `path = Path("folder/file.txt")`                           |
| Path.cwd()                        | Returns the current working directory.            | `path = Path.cwd()`                                         |
| Path.home()                       | Returns the user's home directory.                | `path = Path.home()`                                        |

---

### PATH JOINING

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.joinpath(*other_paths)       | Joins multiple paths into a single path.         | `path.joinpath("folder", "file.txt")`                       |
| Path.__truediv__(other_path)      | Allows using `/` to join paths.                   | `path / "folder" / "file.txt"`                              |

---

### PATH INSPECTION

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.is_absolute()                | Checks if the path is absolute.                   | `path.is_absolute()`                                        |
| Path.exists()                     | Checks if the path exists in the filesystem.      | `path.exists()`                                             |
| Path.is_file()                    | Checks if the path is a file.                     | `path.is_file()`                                            |
| Path.is_dir()                     | Checks if the path is a directory.                | `path.is_dir()`                                             |
| Path.parent                       | Returns the parent directory.                     | `path.parent`                                               |
| Path.name                         | Returns the final component (file or folder).     | `path.name`                                                 |
| Path.stem                         | Returns the file name without extension.          | `path.stem`                                                 |
| Path.suffix                       | Returns the file extension.                       | `path.suffix`                                               |
| Path.relative_to(other_path)      | Converts absolute path to relative.               | `path.relative_to(base_path)`                               |

---

### PATH OPERATIONS

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.resolve()                    | Converts relative path to an absolute path.       | `path.resolve()`                                            |
| Path.samefile(other_path)         | Checks if two paths refer to the same file.       | `path.samefile(other_path)`                                 |
| Path.with_name(name)              | Returns a new path with the specified file name.  | `path.with_name("new_name.txt")`                            |
| Path.with_suffix(suffix)          | Returns a new path with the specified suffix.     | `path.with_suffix(".md")`                                   |
| Path.touch()                      | Creates an empty file or updates the timestamp.    | `path.touch()`                                              |
| Path.mkdir(parents=True, exist_ok=True) | Creates directories, including parents if needed.| `path.mkdir(parents=True, exist_ok=True)`                   |
| Path.rename(new_name)             | Renames or moves the file or directory.           | `path.rename("new_name.txt")`                               |
| Path.unlink()                     | Deletes the file or directory.                    | `path.unlink()`                                             |

---

### FILE OPERATIONS

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.read_text()                  | Reads the content of the file as a string.        | `path.read_text()`                                          |
| Path.write_text(text)             | Writes a string to the file.                      | `path.write_text("Hello World!")`                           |
| Path.read_bytes()                 | Reads the file content as bytes.                  | `path.read_bytes()`                                         |
| Path.write_bytes(data)            | Writes binary data to the file.                   | `path.write_bytes(b"Binary data")`                          |

---

### FILE AND DIRECTORY PROPERTIES

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.stat()                       | Returns stats (e.g., size, modification time).    | `stats = path.stat()`                                       |
| Path.is_absolute()                | Checks if the path is absolute.                   | `path.is_absolute()`                                        |
| Path.exists()                     | Checks if the path exists in the filesystem.      | `path.exists()`                                             |

---

### FILE AND DIRECTORY CONTENT HANDLING

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.iterdir()                    | Iterates through the contents of a directory.     | `for item in path.iterdir(): print(item)`                   |
| Path.glob(pattern)                | Finds files matching a pattern in the directory.  | `for txt_file in path.glob("*.txt"): print(txt_file)`       |
| Path.rglob(pattern)               | Recursively finds files matching a pattern.       | `for txt_file in path.rglob("*.txt"): print(txt_file)`      |

### GLOB BASIC SYNTAX
- `*`: Matches any number of characters (except `/` or directory separators).
- `?`: Matches exactly one character.
- `**`: Matches directories and subdirectories recursively.

---

### PATH MANIPULATION

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.relative_to(other_path)      | Converts absolute path to relative.               | `path.relative_to(base_path)`                               |
| Path.joinpath(*other_paths)       | Joins multiple paths into one.                    | `path.joinpath("folder", "file.txt")`                       |
| Path.with_name(name)              | Returns a new path with the given name.           | `path.with_name("new_name.txt")`                            |
| Path.with_suffix(suffix)          | Returns a new path with the specified suffix.     | `path.with_suffix(".md")`                                   |

---

### ADDITIONAL FUNCTIONS

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.samefile(other_path)         | Checks if two paths refer to the same file.       | `path.samefile(other_path)`                                 |
| Path.touch()                      | Creates an empty file or updates its timestamp.    | `path.touch()`                                              |
| Path.rename(new_name)             | Renames/moves the file or directory.              | `path.rename("new_name.txt")`                               |

---

### ADDITIONAL PATH FUNCTIONS

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.__truediv__(other_path)      | Allows using `/` to join paths.                   | `path / "folder" / "file.txt"`                              |
| Path.mkdir(parents=True, exist_ok=True) | Creates directories, including parents.         | `path.mkdir(parents=True, exist_ok=True)`                   |

---

### OTHER USEFUL METHODS

| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.read_text()                  | Reads the content of the file as a string.        | `path.read_text()`                                          |
| Path.write_text(text)             | Writes a string to the file.                      | `path.write_text("Hello World!")`                           |
| Path.read_bytes()                 | Reads the file content as bytes.                  | `path.read_bytes()`                                         |
| Path.write_bytes(data)            | Writes binary data to the file.                   | `path.write_bytes(b"Binary data")`  

## FINDING FILE SIZE
| Function                          | Description                                       | Example Usage                                              |
|-----------------------------------|---------------------------------------------------|------------------------------------------------------------|
| Path.stat()                       | Returns the file statistics, including size.      | `path = Path("file.txt"); stats = path.stat(); file_size = stats.st_size` |
|                                   | The `st_size` attribute represents the size in bytes. | `path = Path("file.txt"); file_size = path.stat().st_size` |                        

### READING FILES
To read files, `pathlib` provides an easy-to-use method `read_text()` for text files and `read_bytes()` for binary files.

| Method                            | Description                                              | Example Usage                                                 |
|-----------------------------------|----------------------------------------------------------|---------------------------------------------------------------|
| Path.read_text()                  | Reads the entire file as a string (text files).          | `path = Path("file.txt"); content = path.read_text()`         |
| Path.read_bytes()                 | Reads the entire file as bytes (binary files).           | `path = Path("file.png"); content = path.read_bytes()`        |


==================================================
USAGE TIPS
==================================================
- Use `pathlib.Path` for a more structured approach to path management.
- Combine methods like `resolve()` and `relative_to()` for flexible path handling.
- Use `mkdir()` with `parents=True` to ensure parent directories are created as needed.







