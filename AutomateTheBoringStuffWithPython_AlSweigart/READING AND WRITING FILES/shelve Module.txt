==================================================
SHELVE MODULE
==================================================

1. OVERVIEW
------------
- **Purpose**: The `shelve` module lets you store Python objects (like strings, lists, or even custom objects) in a file for later retrieval.
- **Data Persistence**: Acts like a persistent dictionary.
- **Underlying Storage**: Uses Python's built-in `dbm` database for storage.

==================================================
2. BASIC OPERATIONS
-------------------

Importing the Module:
---------------------
    import shelve

Opening a Shelf (Persistent Storage):
-------------------------------------
    db = shelve.open("mydata.db")  # Opens a shelf file

Adding Data:
------------
    db["key"] = "value"  # Store data like a dictionary
    db["numbers"] = [1, 2, 3, 4]

Retrieving Data:
----------------
    print(db["key"])      # Output: value
    print(db["numbers"])  # Output: [1, 2, 3, 4]

Updating Data:
--------------
    db["key"] = "new value"

Deleting Data:
--------------
    del db["key"]

Closing the Shelf:
------------------
    Always close the shelf to ensure data is saved:
    db.close()

==================================================
3. FULL EXAMPLE
---------------

    import shelve

    # Open a shelf file
    with shelve.open("mydata.db") as db:
        # Store data
        db["name"] = "Alice"
        db["age"] = 30
        db["colors"] = ["red", "blue", "green"]

        # Retrieve data
        print("Name:", db["name"])
        print("Age:", db["age"])
        print("Favorite Colors:", db["colors"])

    # Open the shelf file again to retrieve data
    with shelve.open("mydata.db") as db:
        print("Name after reopening:", db["name"])

==================================================
4. PROPERTIES OF SHELVE
-----------------------

| Feature            | Description                                                    |
|--------------------|----------------------------------------------------------------|
| **Dictionary-like**| Behaves like a dictionary; use `keys`, `values`, and `items`.  |
| **Persistence**    | Stores data to disk (e.g., `.db` files).                       |
| **Serializing**    | Automatically pickles/unpickles objects for storage/retrieval. |
| **Concurrency**    | Not thread-safe or process-safe (use `threading` carefully).   |

==================================================
5. COMMON METHODS
-----------------

| Method                        | Description                                      |
|-------------------------------|--------------------------------------------------|
| `db.keys()`                   | Returns a view of all keys in the shelf.         |
| `db.values()`                 | Returns a view of all values in the shelf.       |
| `db.items()`                  | Returns a view of all key-value pairs.           |
| `db.get(key, default=None)`   | Retrieves a value, or a default if key is absent.|
| `db.pop(key, default=None)`   | Removes a key and returns its value.             |

==================================================
6. LIMITATIONS
--------------

- **Thread Safety**: Not safe for concurrent access; use locks if needed.
- **Data Serialization**: Only picklable objects can be stored.
- **Platform Dependency**: Files may not be portable across platforms.

==================================================
7. ERROR HANDLING
-----------------

Always handle exceptions when working with file-based storage:

    import shelve

    try:
        db = shelve.open("mydata.db")
        db["name"] = "Alice"
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        db.close()

==================================================
8. TIPS
-------

- Use `with` statements to ensure the shelf is properly closed:
    with shelve.open("mydata.db") as db:
        db["name"] = "Alice"

- Check for key existence before accessing:
    if "name" in db:
        print(db["name"])

- Use `writeback=True` for complex object updates (but it uses more memory):
    with shelve.open("mydata.db", writeback=True) as db:
        db["settings"] = {"theme": "dark"}
        db["settings"]["theme"] = "light"  # Automatically saved

==================================================
9. ALTERNATIVES TO SHELVE
-------------------------

| Module     | Description                                  |
|------------|----------------------------------------------|
| `pickle`   | Serialize and deserialize Python objects.    |
| `json`     | Store data in JSON format (text-based).      |
| `sqlite3`  | Use an SQLite database for structured data.  |
| `dbm`      | Low-level database module.                   |

==================================================
10. SAMPLE OUTPUT
-----------------

Example Code:
-------------
    import shelve

    with shelve.open("example_shelf.db") as db:
        db["username"] = "test_user"
        db["scores"] = [85, 90, 78]

    with shelve.open("example_shelf.db") as db:
        print("Username:", db["username"])
        print("Scores:", db["scores"])

Output:
-------
    Username: test_user
    Scores: [85, 90, 78]

==================================================
